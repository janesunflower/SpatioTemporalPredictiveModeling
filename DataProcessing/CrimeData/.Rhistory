?glmnet
?glmpath
?match.call
getAnywhere(corrector1)
?drop
?.Machine$double.eps
?corrector
getAnywhere(predictor1)
getAnywhere(step.length)
?step.length
?glmnet
?glmpath
?predict.glmpath
getAnywhere(predict.glmpath)
getAnywhere(plot.glmpath)
?.C
?solve_glmpath
library(gstat)
?vgmST
?variogram
?vgmST
install.packages("automap")
?autoKrige
?autokrige
library(automap)
?autoKrige
library(gstat)
?fit.varigoramST
?fit.varigoram
?fit.VarigoramST
?fit.variogramST
?fit.VariogramST
?fit.Variogram
?fit.variogram
fit.StVariogram
?fit.StVariogram
variogramSurface
?variogramSurface
?optim
?extractPar
sumMetricModel <- vgmST("sumMetric",space=vgm(30, "Sph", 200,  6), time =vgm(30, "Sph",  15,  7),joint=vgm(60, "Exp",  84, 22),stAni=100)
extractPar(sumMetricModel)
library(gstat)
?vgmST
library(gplots)
x <- rnorm(2000, sd=4)
y <- rnorm(2000, sd=1)
hist2d(x,y)
?findInterval
install.packages("geometry")
library(geometry)
d <- c(-1,1)
pc <- as.matrix(rbind(expand.grid(d,d,d),0))
tc <- delaunayn(pc)
library(rgl)
rgl.viewpoint(60)
rgl.light(120,60)
tetramesh(tc,pc, alpha=0.9)
pc <- as.matrix(rbind(expand.grid(d,d),0))
tc <- delaunayn(pc)
tetramesh(tc,pc, alpha=0.9)
trimesh(tc,pc, alpha=0.9)
p = cbind(x=rnorm(30), y=rnorm(30))
tt = delaunayn(p)
trimesh(tt,p)
rm(list=ls())
p = cbind(x=rnorm(30), y=rnorm(30))
tt = delaunayn(p)
trimesh(tt,p
)
?acf
library(gstat)
?variogram
library(geometry)
library(tridir)
library(tripack)
add.constraint
library(sp)
library(rgeos)
library(rgdal)
streetPath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/CPDShapeFiles/new/Major_Streets"
street.rg <- readOGR(streetPath,"Major_Streets")
library(gstat)
krigeST
?covfn.ST
covfn.ST
?STsolve
STsolve
krigeST.local
warnings()
library(sp)
library(rgeos)
library(rgdal)
buildingPath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/Buildings_20Boundaries"
building.rg <- readOGR(buildingPath,"Buildings")
plot(building.rg,main="Buildings")
rm(list=ls())
schoolPath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/School_20Grounds"
school.rg <- readOGR(schoolPath,"School_Grounds")
plot(building.rg,main="Schools")
box(which = "plot", lty = "solid")
plot(school.rg,main="Schools")
rm(list=ls())
Path.cpd_station <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/cpd_stations"
cpd_station.shp <- readOGR(Path.cpd_station,"cpd_stations")
plot(cpd_station.shp,main="CPD stations")
box(which = "plot", lty = "solid")
library(maptools)
cpd_station.shp <- readShapePoints(Path.cpd_station,"cpd_stations")
cpd_station.shp <- readShapePoly(Path.cpd_station,"cpd_stations")
cpd_station.shp <- readShapeLine(Path.cpd_station,"cpd_stations")
cpd_station.shp <- readShapeLines(Path.cpd_station,"cpd_stations")
Path.cpd_station <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/police_stations_poly"
cpd_station.shp <- readOGR(Path.cpd_station,"police_stations")
plot(cpd_station.shp,main="CPD stations")
box(which = "plot", lty = "solid")
Path.census_block <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/Census_Blocks"
census_block.shp <- readOGR(Path.census_block,"Census Blocks")
plot(census_block.shp,main="Census Blocks")
box(which = "plot", lty = "solid")
Path.census_tract <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/Census_Tracts"
census_tract.shp <- readOGR(Path.census_tract,"Census Tracts")
plot(census_tract.shp,main="Census Tracts")
box(which = "plot", lty = "solid")
Path.census_tract <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/Census_Tracts"
census_tract.shp <- readOGR(Path.census_tract,"Census_Tracts")
plot(census_tract.shp,main="Census Tracts")
box(which = "plot", lty = "solid")
Path.park <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/parks"
park.shp <- readOGR(Path.park,"parks")
plot(park.shp,main="Parks")
box(which = "plot", lty = "solid")
Path.street_centerline <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/Transportation"
street_centerline.shp <- readOGR(Path.street_centerline,"Transportation")
plot(street_centerline.shp,main="Street Center Line")
box(which = "plot", lty = "solid")
Path.street_centerline <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/Transportation"
street_centerline.shp <- readOGR(Path.street_centerline,"Transportation")
street_centerline.shp <- readShapeLines(Path.street_centerline,"Transportation")
Path.CTA_routes <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/CTA_routes"
CTA_routes.shp <- readOGR(Path.CTA_routes,"CTA_routes")
plot(CTA_routes.shp,main="CTA routes")
box(which = "plot", lty = "solid")
Path.CTA_routes <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/CTA_Routes"
CTA_routes.shp <- readOGR(Path.CTA_routes,"CTA_Routes")
plot(CTA_routes.shp,main="CTA routes")
box(which = "plot", lty = "solid")
library(sp)
library(rgeos)
library(rgdal)
Path.building <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/Buildings"
building.shp <- readOGR(Path.building,"Buildings")  # ~3 GB file!
building.spdf <- building.shp
building.spdf@data <- subset(building.spdf@data,select=c("STORIES","NO_OF_UNIT","NO_STORIES_BELOW","YEAR_BUILT",
"BLDG_SQ_FOOTAGE","BLDG_CONDITION","VACANCY_STATUS",
"X_COORD","Y_COORD","SHAPE_AREA","SHAPE_LEN"))
names(building.spdf@data)
building.spdf@data <- subset(building.spdf@data,select=c("STORIES","BLDG_STATUS","NO_OF_UNIT","NO_STORIES","YEAR_BUILT",
"BLDG_SQ_FOOTAGE","BLDG_CONDITION","VACANCY_STATUS",
"X_COORD","Y_COORD","SHAPE_AREA","SHAPE_LEN"))
building.spdf@data <- subset(building.spdf@data,select=c("BLDG_STATUS","STORIES","NO_OF_UNIT","NO_STORIES","YEAR_BUILT",
"BLDG_SQ_FOOTAGE","BLDG_CONDITION","VACANCY_ST",
"X_COORD","Y_COORD","SHAPE_AREA","SHAPE_LEN"))
building.spdf@data <- subset(building.spdf@data,select=c("BLDG_STATUS","STORIES","NO_OF_UNIT","NO_STORIES",
"YEAR_BUILT","BLDG_SQ_FO","BLDG_CONDI","VACANCY_ST",
"X_COORD","Y_COORD","SHAPE_AREA","SHAPE_LEN"))
building.spdf@data <- subset(building.spdf@data,select=c("BLDG_STATU","STORIES","NO_OF_UNIT","NO_STORIES",
"YEAR_BUILT","BLDG_SQ_FO","BLDG_CONDI","VACANCY_ST",
"X_COORD","Y_COORD","SHAPE_AREA","SHAPE_LEN"))
rm(building.shp)
summary(building.spdf@data)
hist(building.spdf@data$BLDG_SQ_FO,breaks=100)
hist(building.spdf@data$BLDG_SQ_FO,breaks=1000)
hist(building.spdf@data$BLDG_SQ_FO[building.spdf@data$BLDG_SQ_FO<2000],breaks=1000)
hist(building.spdf@data$BLDG_SQ_FO[building.spdf@data$BLDG_SQ_FO>2000],breaks=1000)
hist(building.spdf@data$BLDG_SQ_FO[building.spdf@data$BLDG_SQ_FO>2000],breaks=100)
hist(building.spdf@data$BLDG_SQ_FO[building.spdf@data$BLDG_SQ_FO>200000],breaks=100)
building.shp <- readOGR(Path.building,"Buildings")  # ~3 GB file!
building.spdf@data <- subset(building.spdf@data,select=c("BLDG_ID","BLDG_STATU","STORIES","NO_OF_UNIT","NO_STORIES",
"NON_STANDA","YEAR_BUILT","BLDG_SQ_FO","BLDG_CONDI","VACANCY_ST",
"X_COORD","Y_COORD","SHAPE_AREA","SHAPE_LEN"))
building.spdf <- building.shp
building.spdf@data <- subset(building.spdf@data,select=c("BLDG_ID","BLDG_STATU","STORIES","NO_OF_UNIT","NO_STORIES",
"NON_STANDA","YEAR_BUILT","BLDG_SQ_FO","BLDG_CONDI","VACANCY_ST",
"X_COORD","Y_COORD","SHAPE_AREA","SHAPE_LEN"))
summary(building.spdf@data)
x <- matrix(1:6,2,3)
x
sum(x)
?legend
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/BurglaryAnalysis/CachedFiles/BurglaryBeatwiseTimeSeries.RData")
x <- matrix(rnorm(10), nrow = 5)
dist(x)
d <- dist(x)
x <- matrix(rnorm(100), nrow=20,ncol=5)
d <- dist(x)
d <- dist(x,upper=TRUE)
d
d <- dist(x)
d
d <- as.vector(d)
d
rm(list=ls())
?expand.grid
grd <- expand.grid(x=1:5,y=10:15)
grd[1]
grd[1,1]
grdm <- as.matrix(grd)
grdm[40]
View(grdm)
grdm[31]
grd[30]
grd[30,]
class[grd[30,]]
class(grd[30,])
class(grd[30,]$x)
class(grd$x[30,])
class(grd$x[30])
?nnet
library(nnet)
?nnet
?roc
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/BurglaryAnalysis/CachedFiles/BurglaryBeatwiseTimeSeries.RData")
NumGrdinBeat
summary(PredResults$INC_CNT)
summary(BurglaryData.eval_stfdf@data$INC_CNT)
d
summary(polysample)
PredResults.sub <- subset(PredResults, DATEOCC==d,select=c("X_COORD","Y_COORD","DATEOCC"))
?merge
head(polysample)
head(PredResult)
head(PredResults)
head(PredResults.sub)
range(polysample$X_COORD)
range(PredResults$X_COORD)
PredResults.sub2 <- merge(PredResults.sub,polysample,by=c("X_COORD","Y_COORD"),all=TRUE)
beat_template.pred_spdf <- beat_template.spdf
beat_template.pred_spdf@data$TSpred <- rep(NA,nrow(beat_template.pred_spdf@data))
beat_template.pred_spdf@data$TSerr <- rep(NA,nrow(beat_template.pred_spdf@data))
PredResults <- data.frame(matrix(ncol=7, nrow=nrow(grd.beat_s@coords)*length(dateSeq.eval)))
colnames(PredResults) <- c("X_COORD","Y_COORD","DATEOCC","BEAT","INC_CNT","TSpred","TSerr")
PredResults$DATEOCC <- rep(dateSeq.eval,each=nrow(grd.beat_s@coords))
PredResults$X_COORD <- rep(grd.beat_s@coords[,1],length(dateSeq.eval))
PredResults$Y_COORD <- rep(grd.beat_s@coords[,2],length(dateSeq.eval))
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
Pred.df <- as.data.frame(BurglaryData.eval_stfdf[,d])
Pred.df$DATEOCC <- rep(d,nrow(Pred.df))
beatPred.spdf <- beat_template.pred_spdf
for (j in beatList){
Pred.beat_sub <- subset(Pred.df,BEAT==j)
beatPred.spdf@data$INC_CNT[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$INC_CNT
beatPred.spdf@data$TSpred[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSpred
beatPred.spdf@data$TSerr[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSerr
}
polysample <- over(grd.beat_s,beatPred.spdf)
polysample <- subset(cbind(polysample, grd.beat_s@coords),select=-c(OBJECTID))
names(polysample)[names(polysample)=="BEAT_NUMBE"] <- "BEAT"
PredResults.sub <- subset(PredResults, DATEOCC==d,select=c("X_COORD","Y_COORD","DATEOCC"))
PredResults.sub <- merge(PredResults.sub,polysample,by=c("X_COORD","Y_COORD"),all=TRUE)
PredResults[PredResults$DATEOCC==d,] <- PredResults.sub
}
warnings(0)
beat_template.pred_spdf <- beat_template.spdf
beat_template.pred_spdf@data$TSpred <- rep(NA,nrow(beat_template.pred_spdf@data))
beat_template.pred_spdf@data$TSerr <- rep(NA,nrow(beat_template.pred_spdf@data))
PredResults <- data.frame(matrix(ncol=7, nrow=nrow(grd.beat_s@coords)*length(dateSeq.eval)))
colnames(PredResults) <- c("X_COORD","Y_COORD","DATEOCC","BEAT","INC_CNT","TSpred","TSerr")
PredResults$DATEOCC <- rep(dateSeq.eval,each=nrow(grd.beat_s@coords))
PredResults$X_COORD <- rep(grd.beat_s@coords[,1],length(dateSeq.eval))
PredResults$Y_COORD <- rep(grd.beat_s@coords[,2],length(dateSeq.eval))
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
Pred.df <- as.data.frame(BurglaryData.eval_stfdf[,d])
Pred.df$DATEOCC <- rep(d,nrow(Pred.df))
beatPred.spdf <- beat_template.pred_spdf
for (j in beatList){
Pred.beat_sub <- subset(Pred.df,BEAT==j)
beatPred.spdf@data$INC_CNT[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$INC_CNT
beatPred.spdf@data$TSpred[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSpred
beatPred.spdf@data$TSerr[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSerr
}
polysample <- over(grd.beat_s,beatPred.spdf)
polysample <- subset(cbind(polysample, grd.beat_s@coords),select=-c(OBJECTID,DISTRICT))
names(polysample)[names(polysample)=="BEAT_NUMBE"] <- "BEAT"
PredResults.sub <- subset(PredResults, DATEOCC==d,select=c("X_COORD","Y_COORD","DATEOCC"))
PredResults.sub <- merge(PredResults.sub,polysample,by=c("X_COORD","Y_COORD"),all=TRUE)
PredResults[PredResults$DATEOCC==d,] <- PredResults.sub
}
PredResults$BEAT <- factor(PredResults$BEAT)
levels(PredResults$BEAT) <- levels(BurglaryData.eval$BEAT)
grdInBeat <- over(grd.beat_s,beat_template.pred_spdf)
grdInBeat <- subset(cbind(grdInBeat, grd.beat_s@coords),select=-c(OBJECTID))
names(grdInBeat)[names(grdInBeat)=="BEAT_NUMBE"] <- "BEAT"
grdInBeat <- subset(grdInBeat,select=c("BEAT","X_COORD","Y_COORD"))
NumGrdinBeat <- as.data.frame(table(grdInBeat$BEAT))
names(NumGrdinBeat) <- c("BEAT","NumGrd")
for (i in 1:nrow(NumGrdinBeat)){
idx <- PredResults$BEAT==NumGrdinBeat$BEAT[i]
PredResults$INC_CNT[idx] <- PredResults$INC_CNT[idx]/NumGrdinBeat$NumGrd[i]
PredResults$TSpred[idx] <- PredResults$TSpred[idx]/NumGrdinBeat$NumGrd[i]
PredResults$TSerr[idx] <- PredResults$TSerr[idx]/NumGrdinBeat$NumGrd[i]
}
prob <- 0.9
filepath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/BurglaryAnalysis/Plots/BeatPredFig/"
par(mfrow=c(1,1))
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,prob,BurglaryActualPts.sub)
jpeg(paste0(filepath,d,".jpg"), width=1118, height=713, units="px")
plot(PredResults.subRaster,col=jet.colors(256), main="Beat-wise time series prediction",
panel.first=grid(grd.beat_s@grid@cells.dim[2], grd.beat_s@grid@cells.dim[1],col="lightgray", lty="dotted"))
plot(Hit.pred$inPoly_poly, border="red", lwd=1.2, add=TRUE)
plot(BurglaryActualPts.sub, pch=16,col="red",cex=0.7,add=TRUE)
dev.off()
}
proc.time()-ptm
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
for (p in 1:length(probset)){
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,probset[p],BurglaryActualPts.sub)
TPR.pred[i,p] <- Hit.pred$HitRate
}
}
proc.time()-ptm
avgTPR.pred <- colMeans(TPR.pred)
avgTPR.long <- colMeans(TPR.long)
avgTPR.short <- colMeans(TPR.short)
# par(mfrow=c(1,1),pty="s")
# plot(probset,avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",
#      xlab="Pixel quantile of hot spots",ylab="Hit rate",main="Average sensitivity over all test examples",cex.main=0.75)
# lines(probset,avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
# lines(probset,avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
# legend("bottom",legend=c("prediction model","long-term density","short-term density"),
#        col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
par(mfrow=c(1,1),pty="s")
plot(100*(1-probset),100*avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",cex.main=0.75,
xlab="Percentage of the highest pixel values (%)",ylab="Hit rate (%)",main="Average sensitivity over all test examples")
lines(100*(1-probset),100*avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
lines(100*(1-probset),100*avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
legend("bottom",legend=c("prediction model","long-term density","short-term density"),
col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
PredResults <- data.frame(matrix(ncol=7, nrow=nrow(grd.beat_s@coords)*length(dateSeq.eval)))
colnames(PredResults) <- c("X_COORD","Y_COORD","DATEOCC","BEAT","INC_CNT","TSpred","TSerr")
PredResults$DATEOCC <- rep(dateSeq.eval,each=nrow(grd.beat_s@coords))
PredResults$X_COORD <- rep(grd.beat_s@coords[,1],length(dateSeq.eval))
PredResults$Y_COORD <- rep(grd.beat_s@coords[,2],length(dateSeq.eval))
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
Pred.df <- as.data.frame(BurglaryData.eval_stfdf[,d])
Pred.df$DATEOCC <- rep(d,nrow(Pred.df))
beatPred.spdf <- beat_template.pred_spdf
for (j in beatList){
Pred.beat_sub <- subset(Pred.df,BEAT==j)
beatPred.spdf@data$INC_CNT[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$INC_CNT
beatPred.spdf@data$TSpred[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSpred
beatPred.spdf@data$TSerr[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSerr
}
polysample <- over(grd.beat_s,beatPred.spdf)
polysample <- subset(cbind(polysample, grd.beat_s@coords),select=-c(OBJECTID,DISTRICT))
names(polysample)[names(polysample)=="BEAT_NUMBE"] <- "BEAT"
PredResults.sub <- subset(PredResults, DATEOCC==d,select=c("X_COORD","Y_COORD","DATEOCC"))
PredResults.sub <- merge(PredResults.sub,polysample,by=c("X_COORD","Y_COORD"),all=TRUE)
PredResults[PredResults$DATEOCC==d,] <- PredResults.sub
}
PredResults$BEAT <- factor(PredResults$BEAT)
levels(PredResults$BEAT) <- levels(BurglaryData.eval$BEAT)
prob <- 0.9
filepath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/BurglaryAnalysis/Plots/BeatPredFig/"
par(mfrow=c(1,1))
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,prob,BurglaryActualPts.sub)
jpeg(paste0(filepath,d,".jpg"), width=1118, height=713, units="px")
plot(PredResults.subRaster,col=jet.colors(256), main="Beat-wise time series prediction",
panel.first=grid(grd.beat_s@grid@cells.dim[2], grd.beat_s@grid@cells.dim[1],col="lightgray", lty="dotted"))
plot(Hit.pred$inPoly_poly, border="red", lwd=1.2, add=TRUE)
plot(BurglaryActualPts.sub, pch=16,col="red",cex=0.7,add=TRUE)
dev.off()
}
proc.time()-ptm
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
for (p in 1:length(probset)){
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,probset[p],BurglaryActualPts.sub)
TPR.pred[i,p] <- Hit.pred$HitRate
}
}
proc.time()-ptm
avgTPR.pred <- colMeans(TPR.pred)
avgTPR.long <- colMeans(TPR.long)
avgTPR.short <- colMeans(TPR.short)
# par(mfrow=c(1,1),pty="s")
# plot(probset,avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",
#      xlab="Pixel quantile of hot spots",ylab="Hit rate",main="Average sensitivity over all test examples",cex.main=0.75)
# lines(probset,avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
# lines(probset,avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
# legend("bottom",legend=c("prediction model","long-term density","short-term density"),
#        col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
par(mfrow=c(1,1),pty="s")
plot(100*(1-probset),100*avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",cex.main=0.75,
xlab="Percentage of the highest pixel values (%)",ylab="Hit rate (%)",main="Average sensitivity over all test examples")
lines(100*(1-probset),100*avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
lines(100*(1-probset),100*avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
legend("bottom",legend=c("prediction model","long-term density","short-term density"),
col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SpatialFeatureMaps.RData")
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SegmentHotRegions.RData")
for (i in 1:length(classifier)){
if (i==1){
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01)
}else{
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01,add=TRUE)
}
}
mtext("ROC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=classifier,col=cl,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
par(mfrow=c(1,1),mar=c(5,5,5,5),xaxs="i",yaxs="i",cex.axis=1,cex.lab=1,pty="s")
for (i in 1:length(classifier)){
if (i==1){
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01)
}else{
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01,add=TRUE)
}
}
mtext("ROC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=classifier,col=cl,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SegmentHotRegions.RData")
library(ROCR)
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/GroupData_ModelComparison3.RData")
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/GroupData_ModelComparison3.RData")
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SegmentHotRegions.RData")
library(randomForest)
?randomForest
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
P <- matrix(runif(1e4*1e4),ncol=1e4)
P <- matrix(runif(2e4*2e4),ncol=2e4)
setwd("/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/DataPortal/")
source("CrimeType.R")
filePath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/DataPortal/"
fileName.load <- "Crimes_2001_to_present.csv"
file <- paste(filePath,fileName.load,sep="")
CrimeData <- read.csv(file)
CrimeTypes <- "ViolentCrime"
for (i in CrimeTypes){
FilteredCrimeData <- FilterDataByCrimeType(CrimeData,i)
fileName.save <- paste0(toupper(i),"_01_14.csv")
write.csv(FilteredCrimeData,paste(filePath,fileName.save,sep=""),row.names=FALSE)
}
fileName <- paste0(toupper(i),"_01_14.csv")
assign(paste0(i,"Data"),importCrimeData(filePath,fileName))
eval(parse(text=paste0("row.names(",i,"Data)<-NULL")))
eval(parse(text=paste0("save(",i,"Data,file=\"",i,"Data_portal.RData\")")))
source("importCrimeData.R")
assign(paste0(i,"Data"),importCrimeData(filePath,fileName))
eval(parse(text=paste0("row.names(",i,"Data)<-NULL")))
eval(parse(text=paste0("save(",i,"Data,file=\"",i,"Data_portal.RData\")")))
